name: CI/CD Development Env

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  ENVIRONMENT: development
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_CONTAINER_NAME: account-center

jobs:
  build-dev:
    name: Test & Build for Development
    runs-on: ["ubuntu-latest"]
    environment: development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
              VITE_ENV=${{ vars.ENV }}
              VITE_BASE_URL=${{ vars.BASE_URL }}
              VITE_ACCESS_EXPIRE=${{ vars.ACCESS_EXPIRE }}
              VITE_REFRESH_EXPIRE=${{ vars.REFRESH_EXPIRE }}
              VITE_APP_URL=${{ vars.APP_URL }}


  deploy-dev:
    name: Deploy on Development
    needs: [build-dev]
    runs-on: ["socious-runner-dev"]
    if: github.event_name != 'pull_request'
    environment: development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Docker run
        run: |
          docker pull ${{ steps.meta.outputs.tags }}
          docker ps -qa --filter "name=${{ env.DOCKER_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.DOCKER_CONTAINER_NAME }} && docker rm -fv ${{ env.DOCKER_CONTAINER_NAME }}
          docker run -d --restart always -p 3000:3000 -h ${{ env.DOCKER_CONTAINER_NAME }} --name ${{ env.DOCKER_CONTAINER_NAME }} ${{ steps.meta.outputs.tags }}
